// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PrivatePond.Data.EF;

namespace PrivatePond.Migrations
{
    [DbContext(typeof(PrivatePondDbContext))]
    [Migration("20210205084345_TransferRequesttId_Generate")]
    partial class TransferRequesttId_Generate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("PrivatePond.Data.DepositRequest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("KeyPath")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("WalletId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("WalletId");

                    b.ToTable("DepositRequests");
                });

            modelBuilder.Entity("PrivatePond.Data.EF.SigningRequest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("PSBT")
                        .HasColumnType("text");

                    b.Property<string>("SignedPSBT")
                        .HasColumnType("text");

                    b.Property<string>("SignerId")
                        .HasColumnType("text");

                    b.Property<string>("SigningRequestGroup")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("WalletId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SigningRequests");
                });

            modelBuilder.Entity("PrivatePond.Data.TransferRequest", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("Destination")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TransferType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("TransferRequests");
                });

            modelBuilder.Entity("PrivatePond.Data.Wallet", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("DerivationStrategy")
                        .HasColumnType("text");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("PrivatePond.Data.WalletTransaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("BlockHash")
                        .HasColumnType("text");

                    b.Property<int?>("BlockHeight")
                        .HasColumnType("integer");

                    b.Property<int>("Confirmations")
                        .HasColumnType("integer");

                    b.Property<string>("DepositRequestId")
                        .HasColumnType("text");

                    b.Property<bool>("InactiveDepositRequest")
                        .HasColumnType("boolean");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TransferRequestId")
                        .HasColumnType("text");

                    b.Property<string>("WalletId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DepositRequestId");

                    b.HasIndex("TransferRequestId");

                    b.HasIndex("WalletId");

                    b.ToTable("WalletTransactions");
                });

            modelBuilder.Entity("PrivatePond.Data.DepositRequest", b =>
                {
                    b.HasOne("PrivatePond.Data.Wallet", "Wallet")
                        .WithMany()
                        .HasForeignKey("WalletId");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("PrivatePond.Data.WalletTransaction", b =>
                {
                    b.HasOne("PrivatePond.Data.DepositRequest", null)
                        .WithMany("WalletTransactions")
                        .HasForeignKey("DepositRequestId");

                    b.HasOne("PrivatePond.Data.TransferRequest", null)
                        .WithMany("WalletTransactions")
                        .HasForeignKey("TransferRequestId");

                    b.HasOne("PrivatePond.Data.Wallet", "Wallet")
                        .WithMany()
                        .HasForeignKey("WalletId");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("PrivatePond.Data.DepositRequest", b =>
                {
                    b.Navigation("WalletTransactions");
                });

            modelBuilder.Entity("PrivatePond.Data.TransferRequest", b =>
                {
                    b.Navigation("WalletTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}

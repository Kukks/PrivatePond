// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PrivatePond.Data.EF;

namespace PrivatePond.Migrations
{
    [DbContext(typeof(PrivatePondDbContext))]
    [Migration("20210303094921_TiemstampToPayJoinLock")]
    partial class TiemstampToPayJoinLock
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("PrivatePond.Data.DepositRequest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("KeyPath")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("WalletId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("WalletId");

                    b.ToTable("DepositRequests");
                });

            modelBuilder.Entity("PrivatePond.Data.EF.SigningRequest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("FinalPSBT")
                        .HasColumnType("text");

                    b.Property<string>("PSBT")
                        .HasColumnType("text");

                    b.Property<int>("RequiredSignatures")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("WalletId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SigningRequests");
                });

            modelBuilder.Entity("PrivatePond.Data.EF.SigningRequestItem", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("SignedPSBT")
                        .HasColumnType("text");

                    b.Property<string>("SignerId")
                        .HasColumnType("text");

                    b.Property<string>("SigningRequestId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SigningRequestId");

                    b.ToTable("SigningRequestItems");
                });

            modelBuilder.Entity("PrivatePond.Data.PayjoinLock", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("PayjoinLocks");
                });

            modelBuilder.Entity("PrivatePond.Data.PayjoinRecord", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<decimal?>("DepositContributedAmount")
                        .HasColumnType("numeric");

                    b.Property<string>("DepositRequestId")
                        .HasColumnType("text");

                    b.Property<string>("OriginalTransactionId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DepositRequestId");

                    b.ToTable("PayjoinRecords");
                });

            modelBuilder.Entity("PrivatePond.Data.ScheduledTransaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("BroadcastAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReplacesSigningRequestId")
                        .HasColumnType("text");

                    b.Property<string>("Transaction")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ScheduledTransactions");
                });

            modelBuilder.Entity("PrivatePond.Data.TransferRequest", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("Destination")
                        .HasColumnType("text");

                    b.Property<string>("FromWalletId")
                        .HasColumnType("text");

                    b.Property<string>("SigningRequestId")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ToWalletId")
                        .HasColumnType("text");

                    b.Property<int>("TransferType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SigningRequestId")
                        .IsUnique();

                    b.ToTable("TransferRequests");
                });

            modelBuilder.Entity("PrivatePond.Data.Wallet", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("DerivationStrategy")
                        .HasColumnType("text");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("PrivatePond.Data.WalletTransaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("BlockHash")
                        .HasColumnType("text");

                    b.Property<int?>("BlockHeight")
                        .HasColumnType("integer");

                    b.Property<int>("Confirmations")
                        .HasColumnType("integer");

                    b.Property<string>("DepositRequestId")
                        .HasColumnType("text");

                    b.Property<bool>("InactiveDepositRequest")
                        .HasColumnType("boolean");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("WalletId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DepositRequestId");

                    b.HasIndex("WalletId");

                    b.ToTable("WalletTransactions");
                });

            modelBuilder.Entity("PrivatePond.Data.DepositRequest", b =>
                {
                    b.HasOne("PrivatePond.Data.Wallet", "Wallet")
                        .WithMany()
                        .HasForeignKey("WalletId");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("PrivatePond.Data.EF.SigningRequestItem", b =>
                {
                    b.HasOne("PrivatePond.Data.EF.SigningRequest", "SigningRequest")
                        .WithMany("SigningRequestItems")
                        .HasForeignKey("SigningRequestId");

                    b.Navigation("SigningRequest");
                });

            modelBuilder.Entity("PrivatePond.Data.PayjoinRecord", b =>
                {
                    b.HasOne("PrivatePond.Data.DepositRequest", null)
                        .WithMany("PayjoinRecords")
                        .HasForeignKey("DepositRequestId");
                });

            modelBuilder.Entity("PrivatePond.Data.TransferRequest", b =>
                {
                    b.HasOne("PrivatePond.Data.EF.SigningRequest", "SigningRequest")
                        .WithOne("TransferRequest")
                        .HasForeignKey("PrivatePond.Data.TransferRequest", "SigningRequestId");

                    b.Navigation("SigningRequest");
                });

            modelBuilder.Entity("PrivatePond.Data.WalletTransaction", b =>
                {
                    b.HasOne("PrivatePond.Data.DepositRequest", null)
                        .WithMany("WalletTransactions")
                        .HasForeignKey("DepositRequestId");

                    b.HasOne("PrivatePond.Data.Wallet", "Wallet")
                        .WithMany()
                        .HasForeignKey("WalletId");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("PrivatePond.Data.DepositRequest", b =>
                {
                    b.Navigation("PayjoinRecords");

                    b.Navigation("WalletTransactions");
                });

            modelBuilder.Entity("PrivatePond.Data.EF.SigningRequest", b =>
                {
                    b.Navigation("SigningRequestItems");

                    b.Navigation("TransferRequest");
                });
#pragma warning restore 612, 618
        }
    }
}
